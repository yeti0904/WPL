(inCarpet = ([x y] => {
	(looping = 1) ;
	({looping} @ {
		(({x == 0} || {y == 0}) ? {
			(looping = 0) ;
			(ret = 1)
		}) ;
		(({x /= 0} && {y /= 0}) ? {
			(({(x % 3) == 1} && {(y % 3) == 1}) ? {
				(looping = 0) ;
				(ret = 0)
			})
		}) ;
		(x = (x / 3)) ;
		(y = (y / 3))
	}) ;
	ret
})) ;
(carpet = ([n] => {
	(i = 0) ;
	({i < (3 ^ n)} @ {
		(j = 0) ;
		({j < (3 ^ n)} @ {
			(ret = (inCarpet ! [i j])) ;
			((ret) ? {
				(stdout .s "##")
			}) ;
			((ret == 0) ? {
				(stdout .s "  ")
			}) ;
			(j = (j + 1))
		}) ;
		(stdout .s "\n") ;
		(i = (i + 1))
	})
})) ;
(carpet ! [3])
